// Generated using SwiftGen, by O.Halligon â€” https://github.com/SwiftGen/SwiftGen

{% if catalogs %}
{% set imageAlias %}{{param.imageAliasName|default:"Icon"}}{% endset %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
#if os(OSX)
  import AppKit.NSImage
  {{accessModifier}} typealias {{imageAlias}} = NSImage
#elseif os(iOS) || os(tvOS) || os(watchOS)
  import UIKit.UIImage
  {{accessModifier}} typealias {{imageAlias}} = UIImage
#endif

// swiftlint:disable superfluous_disable_command
// swiftlint:disable file_length

{% set enumName %}{{param.enumName|default:"IconType"}}{% endset %}
{% set imageType %}{{param.imageTypeName|default:"IconAsset"}}{% endset %}
@available(*, deprecated, renamed: "{{imageType}}")
{{accessModifier}} typealias {{enumName}}Type = {{imageType}}

{{accessModifier}} struct {{imageType}} {
  {{accessModifier}} fileprivate(set) var name: String

  {{accessModifier}} var image: {{imageAlias}}? {
    let bundle = Bundle(for: BundleToken.self)
    #if os(iOS) || os(tvOS)
    let image = {{imageAlias}}(named: name, in: bundle, compatibleWith: nil)
    #elseif os(OSX)
    let image = bundle.image(forResource: NSImage.Name(name))
    #elseif os(watchOS)
    let image = {{imageAlias}}(named: name)
    #endif
    guard let result = image else { return nil /*fatalError("Unable to load image named \(name).")*/ }
    return result
  }
}

private final class BundleToken {}

{% endif %}
